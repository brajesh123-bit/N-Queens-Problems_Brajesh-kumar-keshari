def print_solution(board):
    # Prints the board configuration where 'Q' represents a queen and '.' represents an empty space
    for row in board:
        print(" ".join("Q" if col else "." for col in row))
    print()

def is_safe(board, row, col, n):
    """
    Checks if it's safe to place a queen at position (row, col)
    A position is safe if:
    - No queen exists in the same row on the left side
    - No queen exists in the upper left diagonal
    - No queen exists in the lower left diagonal
    """
    
    # Check this row on the left side
    for i in range(col):
        if board[row][i]:
            return False
    
    # Check upper diagonal on the left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j]:
            return False
    
    # Check lower diagonal on the left side
    for i, j in zip(range(row, n, 1), range(col, -1, -1)):
        if board[i][j]:
            return False
    
    return True

def solve_n_queens_util(board, col, n):
    """
    Recursively tries to place queens column by column
    Base case: If all queens are placed successfully, print the solution
    """
    if col >= n:
        print_solution(board)
        return True
    
    res = False  # To track if at least one solution is found
    for i in range(n):
        # Check if it's safe to place a queen at board[i][col]
        if is_safe(board, i, col, n):
            board[i][col] = True  # Place the queen
            res = solve_n_queens_util(board, col + 1, n) or res  # Recur for next column
            board[i][col] = False  # Backtrack and remove the queen
    
    return res

def solve_n_queens(n):
    """
    Initializes the board and starts solving the N-Queens problem
    """
    board = [[False] * n for _ in range(n)]  # Create an empty NxN board
    if not solve_n_queens_util(board, 0, n):
        print("No solution exists")

# Get input from the user
n = int(input("Enter the number of queens: "))
solve_n_queens(n)
